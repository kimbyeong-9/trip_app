import React, { useState } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import Settings from '../pages/Settings';
import ProfileInfo from '../pages/ProfileInfo';
import Login from '../pages/Login';
const Navigation = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isSettingsOpen, setIsSettingsOpen] = useState(false);
  const [isProfileInfoOpen, setIsProfileInfoOpen] = useState(false);
  const [isLoginOpen, setIsLoginOpen] = useState(false);  const [searchQuery, setSearchQuery] = useState('');
  const location = useLocation();
  const navigate = useNavigate();

  const navItems = [
    { path: '/', label: '홈', icon: '🏠' },
    { path: '/search', label: '검색', icon: '🔍' },
    { path: '/mypage', label: '마이페이지', icon: '👤' }
  ];

  const isActive = (path) => {
    if (path === '/') {
      return location.pathname === '/';
    }
    return location.pathname.startsWith(path);
  };

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      navigate(`/search?q=${encodeURIComponent(searchQuery)}`);
    }
  };

  const handleNotificationClick = () => {
    alert('알림 기능은 준비 중입니다!');
  };

  return (
    <nav className="navigation">
      <div className="nav-container">
        {/* 왼쪽 영역 */}
        <div className="nav-left">
          <button 
            className="hamburger-menu-button"

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}            onClick={() => setIsMenuOpen(!isMenuOpen)}
          >
            <span className="hamburger-icon">☰</span>
          </button>

          <Link to="/" className="nav-logo">
            <span className="logo-text">여행대로</span>
          </Link>
        </div>

        {/* 중앙 영역 - 검색창 */}
        <div className="nav-center">
          <form className="nav-search-form" onSubmit={handleSearch}>
            <div className="search-input-container">
              <input
                type="text"
                placeholder="검색어 입력..."
                value={searchQuery}

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}                onChange={(e) => setSearchQuery(e.target.value)}
                className="nav-search-input"
              />
              <button type="submit" className="search-submit-button">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M21 21L16.5 16.5M19 11C19 15.4183 15.4183 19 11 19C6.58172 19 3 15.4183 3 11C3 6.58172 6.58172 3 11 3C15.4183 3 19 6.58172 19 11Z" stroke="#666" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              </button>
            </div>
          </form>
        </div>

        {/* 오른쪽 영역 */}
        <div className="nav-right">
          <button 
            className="notification-button"
            onClick={handleNotificationClick}
          >
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18 8C18 6.4087 17.3679 4.88258 16.2426 3.75736C15.1174 2.63214 13.5913 2 12 2C10.4087 2 8.88258 2.63214 7.75736 3.75736C6.63214 4.88258 6 6.4087 6 8C6 15 3 17 3 17H21C21 17 18 15 18 8Z" stroke="#333" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              <path d="M13.73 21C13.5542 21.3031 13.3019 21.5547 12.9982 21.7295C12.6946 21.9044 12.3504 21.9965 12 21.9965C11.6496 21.9965 11.3054 21.9044 11.0018 21.7295C10.6982 21.5547 10.4458 21.3031 10.27 21" stroke="#333" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>

          <div className="nav-user-menu">
            <button className="login-button" onClick={() => setIsLoginOpen(true)}>로그인</button>
            <button className="signup-button">회원가입</button>
          </div>
        </div>
      </div>

      {/* 사이드 메뉴 */}
      {isMenuOpen && (
        <div className="side-menu">
          <div className="side-menu-content">
            {/* 상단 로고 */}
            <div className="side-menu-header">
              <div className="side-menu-logo">
                <span className="side-logo-text">여행대로</span>
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="#007AFF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M2 17L12 22L22 17" stroke="#007AFF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <path d="M2 12L12 17L22 12" stroke="#007AFF" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              </div>
              <button 
                className="settings-menu-button"

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}                onClick={() => setIsSettingsOpen(true)}
              >
                ⚙️
              </button>
            </div>

            {/* 프로필 섹션 */}
            <div className="side-profile-section">
              <div className="profile-avatar">
                <div className="avatar-circle">
                  <svg width="30" height="30" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <circle cx="12" cy="7" r="4" stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </div>
              </div>
              <div className="profile-info">
                <h3 className="profile-name">김병구</h3>
                <button 
                  className="profile-edit"

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}                  onClick={() => setIsProfileInfoOpen(true)}
                >
                  프로필 편집 {'>'}
                </button>
              </div>
            </div>

            {/* 다른 여행자 일정 둘러보기 */}
            <div className="travel-explore-section">
              <button className="travel-explore-button">
                <div className="explore-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2" stroke="white" strokeWidth="2"/>
                    <line x1="16" y1="2" x2="16" y2="6" stroke="white" strokeWidth="2"/>
                    <line x1="8" y1="2" x2="8" y2="6" stroke="white" strokeWidth="2"/>
                    <line x1="3" y1="10" x2="21" y2="10" stroke="white" strokeWidth="2"/>
                  </svg>
                </div>
                <span>다른 여행자 일정 둘러보기 {'>'}</span>
              </button>
            </div>

            {/* 동행모집 신청하기 */}
            <div className="companion-section">
              <div className="companion-banner">
                <div className="companion-content">
                  <h4>동행모집 신청하기 {'>'}</h4>
                  <div className="companion-illustration">
                    <div className="traveler-icons">
                      <div className="traveler-icon traveler-1"></div>
                      <div className="traveler-icon traveler-2"></div>
                      <div className="traveler-icon traveler-3"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* 메뉴 항목들 */}
            <div className="side-menu-items">
              <Link to="/myinfo" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">내 정보</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/challenge" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">발걸음 챌린지</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/stamp-tour" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">스탬프 투어</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/notice" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">놀이터</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/coupon" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">쿠폰함</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/sharing" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">공지사항</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
              
              <Link to="/customer-service" className="side-menu-item" onClick={() => setIsMenuOpen(false)}>
                <span className="menu-label">고객지원</span>
                <span className="menu-arrow">{'>'}</span>
              </Link>
            </div>
          </div>
        </div>

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}      )}

      {/* 메뉴 오버레이 */}
      {isMenuOpen && (
        <div 
          className="menu-overlay"

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}          onClick={() => setIsMenuOpen(false)}
        />

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}      )}

      {/* 설정 페이지 */}
      {isSettingsOpen && (
        <div className="settings-overlay">
          <Settings onClose={() => setIsSettingsOpen(false)} />
        </div>

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}      )}

      {/* 프로필 정보 페이지 */}
      {isProfileInfoOpen && (
        <div className="profile-info-overlay">
          <ProfileInfo onClose={() => setIsProfileInfoOpen(false)} />
        </div>

      {/* 로그인 페이지 */}
      {isLoginOpen && (
        <div className="login-overlay">
          <Login onClose={() => setIsLoginOpen(false)} />
        </div>
      )}      )}
    </nav>
  );
};

export default Navigation;